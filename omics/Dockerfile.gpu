FROM node:8-slim
ARG OMICSSERVER
ADD workflow-editor /app
WORKDIR /app
RUN sed -ri "s|(omicsUrl: )'(.*)'|\1'"$OMICSSERVER"'|g" src/environments/environment.prod.ts
RUN npm install
RUN /app/node_modules/@angular/cli/bin/ng build --prod --deployUrl=/omics/static/workflow_editor/ --baseHref=/omics/static/workflow_editor/

FROM nvidia/cuda:10.1-runtime-ubuntu18.04
ARG OMICS_UID
ARG OMICS_GID
ARG DEBIAN_FRONTEND=noninteractive

ENV PATH /usr/local/bin:$PATH
ENV LANG C.UTF-8


# From python:3.7 Dockerfile

ENV GPG_KEY 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
ENV PYTHON_VERSION 3.7.4

RUN apt update && apt install -y apt-transport-https ca-certificates wget gnupg libopenblas-base --no-install-recommends
RUN wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
RUN echo "deb https://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list
RUN apt -y update && apt -y install build-essential gcc gfortran libpcre3-dev libmagic1 wget git xvfb sudo \
      xauth libgtk2.0-0 libgconf-2-4 google-chrome-stable poppler-utils inkscape --no-install-recommends && \
      rm -rf /var/lib/apt/lists/*

RUN set -ex \
	\
	&& savedAptMark="$(apt-mark showmanual)" \
	&& apt-get update && apt-get install -y --no-install-recommends \
		dpkg-dev \
		gcc \
		libbz2-dev \
		libc6-dev \
		libexpat1-dev \
		libffi-dev \
		libgdbm-dev \
		liblzma-dev \
		libncursesw5-dev \
		libreadline-dev \
		libsqlite3-dev \
		libssl-dev \
		make \
		tk-dev \
		uuid-dev \
		xz-utils \
		zlib1g-dev \
# as of Stretch, "gpg" is no longer included by default
		$(command -v gpg > /dev/null || echo 'gnupg dirmngr') \
	\
	&& wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz" \
	&& wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc" \
	&& export GNUPGHOME="$(mktemp -d)" \
	&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY" \
	&& gpg --batch --verify python.tar.xz.asc python.tar.xz \
	&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \
	&& rm -rf "$GNUPGHOME" python.tar.xz.asc \
	&& mkdir -p /usr/src/python \
	&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \
	&& rm python.tar.xz \
	\
	&& cd /usr/src/python \
	&& gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
	&& ./configure \
		--build="$gnuArch" \
		--enable-loadable-sqlite-extensions \
		--enable-optimizations \
		--enable-shared \
		--with-system-expat \
		--with-system-ffi \
		--without-ensurepip \
	&& make -j "$(nproc)" \
# setting PROFILE_TASK makes "--enable-optimizations" reasonable: https://bugs.python.org/issue36044 / https://github.com/docker-library/python/issues/160#issuecomment-509426916
		PROFILE_TASK='-m test.regrtest --pgo \
			test_array \
			test_base64 \
			test_binascii \
			test_binhex \
			test_binop \
			test_bytes \
			test_c_locale_coercion \
			test_class \
			test_cmath \
			test_codecs \
			test_compile \
			test_complex \
			test_csv \
			test_decimal \
			test_dict \
			test_float \
			test_fstring \
			test_hashlib \
			test_io \
			test_iter \
			test_json \
			test_long \
			test_math \
			test_memoryview \
			test_pickle \
			test_re \
			test_set \
			test_slice \
			test_struct \
			test_threading \
			test_time \
			test_traceback \
			test_unicode \
		' \
	&& make install \
	&& ldconfig \
	\
	&& apt-mark auto '.*' > /dev/null \
	&& apt-mark manual $savedAptMark \
	&& find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';' \
		| awk '/=>/ { print $(NF-1) }' \
		| sort -u \
		| xargs -r dpkg-query --search \
		| cut -d: -f1 \
		| sort -u \
		| xargs -r apt-mark manual \
	&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
	&& rm -rf /var/lib/apt/lists/* \
	\
	&& find /usr/local -depth \
		\( \
			\( -type d -a \( -name test -o -name tests \) \) \
			-o \
			\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
		\) -exec rm -rf '{}' + \
	&& rm -rf /usr/src/python \
	\
	&& python3 --version

# make some useful symlinks that are expected to exist
RUN cd /usr/local/bin \
	&& ln -s idle3 idle \
	&& ln -s pydoc3 pydoc \
	&& ln -s python3 python \
	&& ln -s python3-config python-config

# if this is called "PIP_VERSION", pip explodes with "ValueError: invalid truth value '<VERSION>'"
ENV PYTHON_PIP_VERSION 19.2.2
# https://github.com/pypa/get-pip
ENV PYTHON_GET_PIP_URL https://github.com/pypa/get-pip/raw/0c72a3b4ece313faccb446a96c84770ccedc5ec5/get-pip.py
ENV PYTHON_GET_PIP_SHA256 201edc6df416da971e64cc94992d2dd24bc328bada7444f0c4f2031ae31e8dad

RUN set -ex; \
	\
	savedAptMark="$(apt-mark showmanual)"; \
	apt-get update; \
	apt-get install -y --no-install-recommends wget; \
	\
	wget -O get-pip.py "$PYTHON_GET_PIP_URL"; \
	echo "$PYTHON_GET_PIP_SHA256 *get-pip.py" | sha256sum --check --strict -; \
	\
	apt-mark auto '.*' > /dev/null; \
	[ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	rm -rf /var/lib/apt/lists/*; \
	\
	python get-pip.py \
		--disable-pip-version-check \
		--no-cache-dir \
		"pip==$PYTHON_PIP_VERSION" \
	; \
	pip --version; \
	\
	find /usr/local -depth \
		\( \
			\( -type d -a \( -name test -o -name tests \) \) \
			-o \
			\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
		\) -exec rm -rf '{}' +; \
	rm -f get-pip.py

RUN echo "NVBLAS_CPU_BLAS_LIB /usr/lib/x86_64-linux-gnu/libopenblas.so.0" >> /usr/local/cuda/nvblas.conf
RUN echo "NVBLAS_GPU_LIST ALL0" >> /usr/local/cuda/nvblas.conf
RUN echo "NVBLAS_LOGFILE /var/log/nvblas.log" >> /usr/local/cuda/nvblas.conf

RUN pip install --upgrade pip
ADD https://github.com/plotly/orca/releases/download/v1.2.1/orca-1.2.1-x86_64.AppImage .
RUN chmod +x orca-1.2.1-x86_64.AppImage
RUN ./orca-1.2.1-x86_64.AppImage --appimage-extract && rm -rf orca-1.2.1-x86_64.AppImage
RUN mv /squashfs-root/app /orca && mv /squashfs-root/usr/lib/* /usr/lib && rm -rf /squashfs-root
RUN echo '#!/bin/bash' >> /usr/bin/orca && echo 'sudo xvfb-run -a /orca/orca "$@"' >> /usr/bin/orca
RUN chmod +x /usr/bin/orca
ADD omics_dashboard/requirements.txt .
RUN pip install -r requirements.txt
RUN rm requirements.txt
COPY --from=0 /app/dist/workflow-editor /omics_dashboard/static/workflow_editor/
RUN rm -rf /var/lib/apt/lists/*
RUN groupadd -f -g $OMICS_GID omics
RUN useradd -u $OMICS_UID -g omics omics
RUN echo 'omics ALL= NOPASSWD: /usr/bin/xvfb-run' >> /etc/sudoers
ADD entrypoint.sh /
RUN chown omics:omics /entrypoint.sh && chmod +x /entrypoint.sh
ADD omics_dashboard /omics_dashboard/
RUN chown -R omics:omics /omics_dashboard 
RUN touch /var/log/nvblas.log
RUN chown omics:omics /var/log/nvblas.log
USER omics
ENV NVBLAS_CONFIG_FILE /usr/local/cuda/nvblas.conf
ENV LD_PRELOAD /usr/lib/x86_64-linux-gnu/libnvblas.so.10
ENTRYPOINT ["/entrypoint.sh"]
