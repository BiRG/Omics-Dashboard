{
    "swagger": "2.0",
    "basePath": "/",
  "info": {
    "title": "workflow_execution.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/ga4gh/wes/v1/service-info": {
      "get": {
        "summary": "Get information about Workflow Execution Service.  May include information related (but not limited to) the workflow descriptor formats, versions supported, the WES API versions supported, and information about general the service availability.",
        "operationId": "GetServiceInfo",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ga4gh_wes_service_info"
            }
          }
        },
        "tags": [
          "WorkflowExecutionService"
        ]
      }
    },
    "/ga4gh/wes/v1/workflows": {
      "get": {
        "summary": "List the workflows, this endpoint will list the workflows in order of oldest to newest.  There is no guarantee of live updates as the user traverses the pages, the behavior should be decided (and documented) by each implementation.",
        "operationId": "ListWorkflows",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ga4gh_wes_workflow_list_response"
            }
          }
        },
        "parameters": [
          {
            "name": "page_size",
            "description": "OPTIONAL\nNumber of workflows to return at once. Defaults to 256, and max is 2048.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page_token",
            "description": "OPTIONAL\nToken to use to indicate where to start getting results. If unspecified, returns the first page of results.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "key_value_search",
            "description": "OPTIONAL\nFor each key, if the key's value is empty string then match workflows that are tagged with this key regardless of value.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WorkflowExecutionService"
        ]
      },
      "post": {
        "summary": "Run a workflow, this endpoint will allow you to create a new workflow request and retrieve its tracking ID to monitor its progress.  An important assumption in this endpoint is that the workflow_params JSON will include parameterizations along with input and output files.  The latter two may be on S3, Google object storage, local filesystems, etc.  This specification makes no distinction.  However, it is assumed that the submitter is using URLs that this system both understands and can access. For Amazon S3, this could be accomplished by given the credentials associated with a WES service access to a particular bucket.  The details are important for a production system and user on-boarding but outside the scope of this spec.",
        "operationId": "RunWorkflow",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ga4gh_wes_workflow_run_id"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ga4gh_wes_workflow_request"
            }
          }
        ],
        "tags": [
          "WorkflowExecutionService"
        ]
      }
    },
    "/ga4gh/wes/v1/workflows/{workflow_id}": {
      "get": {
        "summary": "Get detailed info about a running workflow",
        "operationId": "GetWorkflowLog",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ga4gh_wes_workflow_log"
            }
          }
        },
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "WorkflowExecutionService"
        ]
      },
      "delete": {
        "summary": "Cancel a running workflow",
        "operationId": "CancelJob",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ga4gh_wes_workflow_run_id"
            }
          }
        },
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "WorkflowExecutionService"
        ]
      }
    },
    "/ga4gh/wes/v1/workflows/{workflow_id}/status": {
      "get": {
        "summary": "Get quick status info about a running workflow",
        "operationId": "GetWorkflowStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ga4gh_wes_workflow_status"
            }
          }
        },
        "parameters": [
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "WorkflowExecutionService"
        ]
      }
    }
  },
  "definitions": {
    "ga4gh_wes_log": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The task or workflow name"
        },
        "cmd": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The command line that was run"
        },
        "startTime": {
          "type": "string",
          "title": "When the command was executed"
        },
        "endTime": {
          "type": "string",
          "title": "When the command completed"
        },
        "stdout": {
          "type": "string",
          "title": "Sample of stdout (not guaranteed to be entire log)"
        },
        "stderr": {
          "type": "string",
          "title": "Sample of stderr (not guaranteed to be entire log)"
        },
        "exitCode": {
          "type": "integer",
          "format": "int32",
          "title": "Exit code of the program"
        }
      },
      "title": "Log and other info"
    },
    "ga4gh_wes_service_info": {
      "type": "object",
      "properties": {
        "workflow_type_versions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ga4gh_wes_workflow_type_version"
          },
          "title": "A map with keys as the workflow format type name (currently only CWL and WDL are used although a service may support others) and value is a workflow_type_version object which simply contains an array of one or more version strings"
        },
        "supported_wes_versions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The version(s) of the WES schema supported by this service"
        },
        "supported_filesystem_protocols": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The filesystem protocols supported by this service, currently these may include common protocols such as 'http', 'https', 'sftp', 's3', 'gs', 'file', 'synapse', or others as supported by this service."
        },
        "engine_versions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "The engine(s) used by this WES service, key is engine name e.g. Cromwell and value is version"
        },
        "system_state_counts": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          },
          "description": "The system statistics, key is the statistic, value is the count of workflows in that state. See the State enum for the possible keys."
        },
        "key_values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "a key-value map of arbitrary, extended metadata outside the scope of the above but useful to report back"
        }
      },
      "description": "."
    },
    "ga4gh_wes_service_info_request": {
      "type": "object",
      "title": "Blank request message for service request"
    },
    "ga4gh_wes_state": {
      "type": "string",
      "enum": [
        "Unknown",
        "Queued",
        "Running",
        "Paused",
        "Complete",
        "Error",
        "SystemError",
        "Canceled",
        "Initializing"
      ],
      "default": "Unknown",
      "title": "Enum for states"
    },
    "ga4gh_wes_workflow_desc": {
      "type": "object",
      "properties": {
        "workflow_id": {
          "type": "string",
          "title": "REQUIRED"
        },
        "state": {
          "$ref": "#/definitions/ga4gh_wes_state",
          "title": "REQUIRED"
        }
      },
      "title": "Small description of workflows, returned by server during listing"
    },
    "ga4gh_wes_workflow_list_request": {
      "type": "object",
      "properties": {
        "page_size": {
          "type": "integer",
          "format": "int64",
          "description": "OPTIONAL\nNumber of workflows to return at once. Defaults to 256, and max is 2048."
        },
        "page_token": {
          "type": "string",
          "description": "OPTIONAL\nToken to use to indicate where to start getting results. If unspecified, returns the first page of results."
        },
        "key_value_search": {
          "type": "string",
          "title": "OPTIONAL\nFor each key, if the key's value is empty string then match workflows that are tagged with this key regardless of value"
        }
      },
      "title": "Request listing of jobs tracked by server"
    },
    "ga4gh_wes_workflow_list_response": {
      "type": "object",
      "properties": {
        "workflows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ga4gh_wes_workflow_desc"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      },
      "title": "Return envelope for workflow listing"
    },
    "ga4gh_wes_workflow_log": {
      "type": "object",
      "properties": {
        "workflow_id": {
          "type": "string",
          "title": "workflow ID"
        },
        "request": {
          "$ref": "#/definitions/ga4gh_wes_workflow_request",
          "title": "the original request object"
        },
        "state": {
          "$ref": "#/definitions/ga4gh_wes_state",
          "title": "state"
        },
        "workflow_log": {
          "$ref": "#/definitions/ga4gh_wes_log",
          "title": "the logs, and other key info like timing and exit code, for the overall run of this workflow"
        },
        "task_logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ga4gh_wes_log"
          },
          "title": "the logs, and other key info like timing and exit code, for each step in the workflow"
        },
        "outputs": {
          "$ref": "#/definitions/protobufStruct",
          "title": "the outputs"
        }
      }
    },
    "ga4gh_wes_workflow_request": {
      "type": "object",
      "properties": {
        "workflow_descriptor": {
          "type": "string",
          "title": "OPTIONAL\nthe workflow CWL or WDL document, must provide either this or workflow_url"
        },
        "workflow_params": {
          "$ref": "#/definitions/protobufStruct",
          "title": "REQUIRED\nthe workflow parameterization document (typically a JSON file), includes all parameterizations for the workflow including input and output file locations"
        },
        "workflow_type": {
          "type": "string",
          "title": "REQUIRED\nthe workflow descriptor type, must be \"CWL\" or \"WDL\" currently (or another alternative supported by this WES instance)"
        },
        "workflow_type_version": {
          "type": "string",
          "title": "REQUIRED\nthe workflow descriptor type version, must be one supported by this WES instance"
        },
        "key_values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "OPTIONAL\na key-value map of arbitrary metadata outside the scope of the workflow_params but useful to track with this workflow request"
        },
        "workflow_url": {
          "type": "string",
          "title": "OPTIONAL\nthe workflow CWL or WDL document, must provide either this or workflow_descriptor"
        }
      },
      "title": "workflow request object"
    },
    "ga4gh_wes_workflow_run_id": {
      "type": "object",
      "properties": {
        "workflow_id": {
          "type": "string",
          "title": "workflow ID"
        }
      }
    },
    "ga4gh_wes_workflow_status": {
      "type": "object",
      "properties": {
        "workflow_id": {
          "type": "string",
          "title": "workflow ID"
        },
        "state": {
          "$ref": "#/definitions/ga4gh_wes_state",
          "title": "state"
        }
      }
    },
    "ga4gh_wes_workflow_type_version": {
      "type": "object",
      "properties": {
        "workflow_type_version": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "an array of one or more version strings"
        }
      },
      "title": "available workflow types supported by this WES"
    },
    "protobufListValue": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Repeated field of dynamically typed values."
        }
      },
      "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array."
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "protobufStruct": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Unordered map of dynamically typed values."
        }
      },
      "description": "`Struct` represents a structured data value, consisting of fields\nwhich map to dynamically typed values. In some languages, `Struct`\nmight be supported by a native representation. For example, in\nscripting languages like JS a struct is represented as an\nobject. The details of that representation are described together\nwith the proto support for the language.\n\nThe JSON representation for `Struct` is JSON object."
    },
    "protobufValue": {
      "type": "object",
      "properties": {
        "null_value": {
          "$ref": "#/definitions/protobufNullValue",
          "description": "Represents a null value."
        },
        "number_value": {
          "type": "number",
          "format": "double",
          "description": "Represents a double value."
        },
        "string_value": {
          "type": "string",
          "description": "Represents a string value."
        },
        "bool_value": {
          "type": "boolean",
          "format": "boolean",
          "description": "Represents a boolean value."
        },
        "struct_value": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Represents a structured value."
        },
        "list_value": {
          "$ref": "#/definitions/protobufListValue",
          "description": "Represents a repeated `Value`."
        }
      },
      "description": "`Value` represents a dynamically typed value which can be either\nnull, a number, a string, a boolean, a recursive struct value, or a\nlist of values. A producer of value is expected to set one of that\nvariants, absence of any variant indicates an error.\n\nThe JSON representation for `Value` is JSON value."
    }
  }
}
